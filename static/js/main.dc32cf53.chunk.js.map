{"version":3,"sources":["components/Block.js","context/GameContext.js","components/Backdrop.js","components/Board.js","components/App.js","serviceWorker.js","index.js"],"names":["Block","click","props","update","index","className","this","block","onClick","Component","GameContext","createContext","GameContextProvider","state","winner","handleWinner","result","setState","Provider","value","children","Backdrop","context","style","isShow","display","reset","contextType","Board","updateBlock","preState","blocks","turn","checkWinner","split","map","text","filter","d","i","indexOf","reduce","a","b","el","Math","abs","length","showBackdrop","push","key","Fragment","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc32cf53.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nclass Block extends Component{\r\n  \r\n    click=()=>{\r\n      this.props.update(this.props.index);\r\n    }\r\n    \r\n    render(){\r\n      return(\r\n        \r\n          <div \r\n            className={`block \r\n            ${this.props.block === 1 ? \"circle\" \r\n            : this.props.block === -1 ? \"cross\" \r\n            : null}`}\r\n  \r\n            onClick={this.click}\r\n          >\r\n          \r\n          </div>  \r\n      )\r\n    }\r\n}\r\n\r\nexport default Block;","import React, {createContext, Component}from 'react';\r\n\r\nexport const GameContext = createContext();\r\n\r\nclass GameContextProvider extends Component {\r\n    \r\n    state = {\r\n        winner: null,\r\n    }\r\n    \r\n    handleWinner = (result) => {\r\n        this.setState({winner: result})\r\n    } \r\n\r\n    render() {\r\n        return (\r\n            <GameContext.Provider value={{...this.state, handleWinner: this.handleWinner}}>\r\n                {this.props.children}\r\n            </GameContext.Provider>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default GameContextProvider;","import React, {Component} from 'react';\r\nimport {GameContext} from '../context/GameContext';\r\n\r\nclass Backdrop extends Component{\r\n    static contextType = GameContext;\r\n\r\n    render(){\r\n      const {winner} = this.context;\r\n      \r\n      return(\r\n        <div className='backdrop' style={this.props.isShow ? {display: 'flex'} : {display:'none'}}>\r\n          <div className='result'>{winner}</div>\r\n          <div className='reset' onClick={this.props.reset}>Reset</div>\r\n        </div>\r\n      )\r\n    }\r\n}\r\n\r\nexport default Backdrop;","import React, {Component} from 'react';\r\nimport Block from './Block';\r\nimport Backdrop from './Backdrop';\r\nimport {GameContext} from '../context/GameContext';\r\n\r\nclass Board extends Component {\r\n\r\n    constructor(props){\r\n      super(props);\r\n      \r\n      this.state= {\r\n          turn: 1,\r\n          blocks: [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          showBackdrop: false\r\n      }\r\n    }\r\n\r\n    static contextType = GameContext;\r\n\r\n    componentDidUpdate(){\r\n        const {winner} = this.context;\r\n        if( winner !== null && !this.state.showBackdrop){\r\n            this.setState({showBackdrop:true})\r\n        }\r\n    }\r\n    \r\n    render(){\r\n      let blocks = [];\r\n      for(let i=0; i<this.state.blocks.length; i++){\r\n        blocks.push(<Block \r\n                      index = {i} \r\n                      block = {this.state.blocks[i]}\r\n                      update = {this.updateBlock}\r\n                      key={i}\r\n                    />);\r\n      }\r\n      \r\n    let turn = '';\r\n    this.state.turn === 1 ? turn = 'O' : turn = 'X'; \r\n    \r\n    \r\n      return(\r\n        <React.Fragment>\r\n            <Backdrop  reset={this.reset} isShow={this.state.showBackdrop}/>\r\n            <div className='turn'>Now is <span>{turn}</span>'s turn</div>\r\n            <div className='board'>{blocks}</div>  \r\n        </React.Fragment>\r\n        \r\n      ) \r\n    }\r\n  \r\n    updateBlock = (index)=>{\r\n        const {winner, handleWinner} = this.context;\r\n\r\n        this.setState((preState)=>{\r\n            let current = preState.blocks[index];\r\n            if(current === 0 && winner === null){\r\n                preState.blocks[index] = preState.turn;\r\n                handleWinner(this.checkWinner());\r\n                return {\r\n                  turn: -preState.turn,\r\n                  blocks: preState.blocks,\r\n                }\r\n            }\r\n        })\r\n    }\r\n  \r\n    checkWinner = ()=>{\r\n      //勝利行數判斷\r\n      let verifyList = '123, 456, 789, 147, 258, 369, 159, 357';\r\n      let result = verifyList.split(',')\r\n                    .map((text) => {\r\n                        let add = this.state.blocks\r\n                                  .filter((d,i)=>text.indexOf(i+1)!==-1)\r\n                                  .reduce((a,b)=>a+b)  //加總\r\n                         \r\n                        return add;\r\n                    })\r\n      result = result.filter((el)=>Math.abs(el) === 3) // 符合 3 或 -3 \r\n     \r\n      if(result.length > 0){\r\n        return result[0] === 3 ? 'O win' : 'X win';\r\n      }else if(this.state.blocks.indexOf(0) === -1){\r\n        return 'Draw';\r\n      }else{\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    reset = ()=>{\r\n      const {handleWinner} = this.context;\r\n      handleWinner(null);\r\n\r\n      this.setState({\r\n          turn: 1,\r\n          blocks: [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          showBackdrop: false\r\n      })\r\n      \r\n    }\r\n  }\r\n  \r\n  export default Board;","import React, {Component} from 'react';\nimport Board from './Board';\nimport GameContextProvider from '../context/GameContext'\n\n// import './App.css';\n\nclass App extends Component{\n  render(){\n    return (\n        <GameContextProvider>\n            <div className='main'>\n                <h1 className='title'>Tic Tac Toe</h1>\n                <Board />\n            </div>\n        </GameContextProvider>\n    )\n  }\n}\n\nexport default App;\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}